from data.config import faculty_encode
from loader import Table, BotDB
from data.config import snils_pattern, kfu_id_patter
import re

# –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤—Ö–æ–¥–Ω–æ–π id –°–ù–ò–õ–°–æ–º –∏–ª–∏ id —Å —Å–∞–π—Ç–∞ –ö–§–£
def is_valid_id(user_id: str) -> bool:
    return re.match(snils_pattern, user_id) or re.match(kfu_id_patter, user_id)

# –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –±–∞–∑–µ
def is_full_match(input_info: list, info_db: list, tgid: int) -> bool:
    for row in info_db:
        if input_info[1] == row[0] and faculty_encode['speciality'][input_info[2]] == row[2] and tgid == row[1] and faculty_encode['category'][input_info[3]] == row[4]:
            return True
    return False

# —Ä–∞—Å–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å
def decode_spec(d: dict, value: int) -> str:
    for k, v in d.items():
        if v == value:
            return k

# –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –≤—Å–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º
def info_message(tgid: int) -> int:
    answer = "üì§ –í—ã –≤ —Å–ø–∏—Å–∫–∞—Ö:\n"
    res = BotDB.get_info(tgid)
    for row in res:
        id = row[0]
        spec = row[2]
        budget = row[4]
        try:
            rank = Table.get_rank(id, spec, budget)
            median = Table.get_median_above(id, spec, budget)
            answer += f"–ù–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ {decode_spec(faculty_encode['speciality'], spec)}({decode_spec(faculty_encode['category'], budget)}) –≤—ã –Ω–∞ {rank} –º–µ—Å—Ç–µ.\n"
            answer += f"–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª —Å—Ä–µ–¥–∏ –ø–æ—Å—Ç—É–ø–∞—é—â–∏—Ö –≤—ã—à–µ –≤–∞—Å –ø–æ —Å–ø–∏—Å–∫—É: {median}\n\n"
        except:
            answer += f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –≤–∞—Å –≤ —Å–ø–∏—Å–∫–∞—Ö {decode_spec(faculty_encode['speciality'], spec)}({decode_spec(faculty_encode['category'], budget)})\n"
    return answer