from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import user
from loader import BotDB, bot, dp, keyboard_sub, keyboard_unsub, Table, loop, faculty_encode
import asyncio
from data.messages import start_message, help_message
from utils.utils import decode_spec, is_full_match, is_valid_id, info_message
from data.config import NOTIFICATION_WAIT, PARSER_WAIT

# message after start command
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await bot.delete_message(message.chat.id, message.message_id)
    await bot.send_message(message.from_user.id, start_message, reply_markup=keyboard_sub)

# message after help command
@dp.message_handler(commands = ["help"])
async def help(message: types.Message):
    await bot.delete_message(message.chat.id, message.message_id)
    await bot.send_message(message.from_user.id, help_message)

# registration command
@dp.message_handler(commands = ["registration", "reg"], commands_prefix = "/!")
async def record(message: types.Message):
    await bot.delete_message(message.chat.id, message.message_id)
    info = message.text.split()
    try:
        user_id = info[1]
        if is_valid_id(user_id):
            spec = faculty_encode["speciality"][info[2]]
            if(not is_full_match(info, BotDB.get_info(message.from_user.id), message.from_user.id)):    
                BotDB.add_user(message.from_user.id, user_id, spec)
                await bot.send_message(message.from_user.id, f"‚úÖ –í—ã –¥–æ–±–∞–≤–∏–ª–∏ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ: {decode_spec(faculty_encode['speciality'], spec)}")
            else:
                await bot.send_message(message.from_user.id, "‚ö†Ô∏è –≠—Ç–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
    except:
        await bot.send_message(message.from_user.id, "‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ–¥–∞–Ω—ã –Ω–µ –≤ –≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.\n‚õë –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ.")
    
# list command
@dp.message_handler(commands=["list"], commands_prefix = "/!")
async def get_list(message: types.Message):
    await bot.delete_message(message.chat.id, message.message_id)
    if(BotDB.user_exists(message.from_user.id)):
        res = BotDB.get_info(message.from_user.id)
        answer = "üìÉ –í–∞—à —Å–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: "
        for row in res:
            answer += (decode_spec(faculty_encode['speciality'], row[2]) + " ")
        await bot.send_message(message.from_user.id, answer)
    else:
        await bot.send_message(message.from_user.id, "üò¢ –í—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è. \n‚õë –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ.")

# delete command
@dp.message_handler(commands=['delete'], commands_prefix = "/!")
async def get_list(message: types.Message):
    await bot.delete_message(message.chat.id, message.message_id)
    info = message.text.split()
    spec = faculty_encode['speciality'][info[1]]
    try:
        BotDB.delete_spec(message.from_user.id, spec)
        await bot.send_message(message.from_user.id, f"ü§ñ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {info[1]} —É–¥–∞–ª–µ–Ω–æ –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞.")
    except:
        await bot.send_message(message.from_user.id, f"üò¢ –£ –≤–∞—Å –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è {info[1]}.")

# snils command
@dp.message_handler(commands=['snils'], commands_prefix = "/!")
async def get_snils(message: types.Message):
    await bot.delete_message(message.chat.id, message.message_id)
    if(BotDB.user_exists(message.from_user.id)):
            res = BotDB.get_info(message.from_user.id)
            answer = "üìÇ –í–∞—à –°–ù–ò–õ–°: " + res[0][0]
            await bot.send_message(message.from_user.id, answer)
    else:
        await bot.send_message(message.from_user.id, "üò¢ –í—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è. \n‚õë –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ.")

# main menu
@dp.message_handler(content_types=["text"])
async def get_info(message: types.Message):
    if message.text == '–ü–æ—Å–ª–µ–¥–Ω—è—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
        await bot.delete_message(message.chat.id, message.message_id)
        res = BotDB.user_exists(message.from_user.id)
        if res:
            answer = info_message(message.from_user.id)
            await bot.send_message(message.from_user.id, answer)
        else:
            await bot.send_message(message.from_user.id, "‚òùüèª –î–ª—è –Ω–∞—á–∞–ª–∞ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n–°–º–æ—Ç—Ä–∏—Ç–µ /help.")
    elif message.text == '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è':
        await bot.delete_message(message.chat.id, message.message_id)
        BotDB.update_sub(message.from_user.id)
        await bot.send_message(message.from_user.id, "‚è≥ –ö–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç –º—ã –±—É–¥–µ–º –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–π –ø–æ–∑–∏—Ü–∏–∏ –≤ —Å–ø–∏—Å–∫–∞—Ö.", reply_markup=keyboard_unsub)
    elif message.text == '–û—Ç–ø–∏—Å–∞—Ç—å—Å—è':
        await bot.delete_message(message.chat.id, message.message_id)
        BotDB.update_sub(message.from_user.id, False)
        await bot.send_message(message.from_user.id, "üòì –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.", reply_markup=keyboard_sub)

# function for notification
async def notification(wait_for):
    while True:
        await asyncio.sleep(wait_for)
        result = BotDB.get_subsriptions()
        if (len(result) > 0):
            check = []
            for row in result:
                if row[1] not in check:
                    await bot.send_message(row[1], "üì® –†–∞—Å—Å—ã–ª–∫–∞:\n" + info_message(row[1]))
                    check.append(row[1])

# function for parsing website by schedule
async def scheduled(wait_for):
    while True:
        await asyncio.sleep(wait_for)
        Table.parser()


if __name__ == '__main__':
    loop.create_task(scheduled(PARSER_WAIT))
    loop.create_task(notification(NOTIFICATION_WAIT))
    executor.start_polling(dp, skip_updates=True)
